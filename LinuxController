package com.tcl.deploy;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.apache.log4j.Logger;

import com.tcl.common.utils.SFTPClient;
import com.tcl.service.entity.Host;

/**
 * @describe 远程执行辅助操作
 * @date 2017年7月6日 下午5:18:50
 */
public class LinuxController {
	/*
	 * 项目绝对路径
	 */
	public static String PROJECT_PATH = new File("").getAbsolutePath();
	private static final Logger LOG = Logger.getLogger(LinuxController.class);
	private static DateFormat df = new SimpleDateFormat("yyyyMMddHHmmss");
	
	/**
	 * 打包
	 * @param batFile
	 * @param dir
	 */
	public static void build(String batFile, String dir) {
		InputStream in = null;
		BufferedReader br = null;
		InputStreamReader isr = null;
		try {
			Process p = Runtime.getRuntime().exec(batFile, null, new File(dir));
			in = p.getInputStream();
			isr = new InputStreamReader(in);
			br = new BufferedReader(isr);
			String line = null;
			while ((line = br.readLine()) != null) {
				LOG.info(line);
			}
			p.waitFor();
		} catch (Exception e) {
			LOG.error(e.getMessage(), e);
		} finally {
			if (in != null) {
				try {
					in.close();
				} catch (IOException e) {
				}
			}
			if (br != null) {
				try {
					br.close();
				} catch (IOException e) {
				}
			}
			if (isr != null) {
				try {
					isr.close();
				} catch (IOException e) {
				}
			}
		}
	}
	
	/**
	 * 部署
	 * @param projectName
	 * @param deployPath
	 * @param pkgFileName
	 * @param host
	 */
	public static void deploy(String projectName, String deployPath, String pkgFileName, Host host){
		try {
			final File file = new File(PROJECT_PATH + "/target/" + pkgFileName);
			if(!file.exists()){
				LOG.error("打包文件不存在...");
				return;
			}
			LOG.info("开始部署...");
			SFTPClient sftp = SFTPClient.instance(host.getUser(), host.getPwd(), host.getIp(), host.getPort()).login();
			//没有则创建目录
			sftp.mkdirRecursively(deployPath)
			//停止
			.exec("sh " + deployPath + "/" + projectName + "/bin/bootstrap.sh stop") //这里默认启动文件为 bootstrap.sh 可自行修改
			//备份
			.mkdirRecursively(deployPath + "/tmp")
			.exec("mv " + deployPath + "/" + pkgFileName + " " + deployPath + "/tmp/" + pkgFileName + "-" + df.format(new Date()) + getSuffix(pkgFileName))
			//删除之前文件及文件夹
			.rmFileOrDirPermanently(deployPath + "/" + projectName)
			.rmFileOrDirPermanently(deployPath + "/" + pkgFileName);
			//上传
			sftp.getSFTPSession().upload(deployPath, file).close();
//			//解压
			sftp.exec("unzip " + deployPath + "/" + pkgFileName + " -d " + deployPath + "/");
//			//执行
			sftp.exec("sh " + deployPath + "/" + projectName + "/bin/bootstrap.sh start");
			sftp.logout();
			LOG.info("部署完成...");
		} catch (Exception e) {
			LOG.error(e.getMessage(), e);
		}
	}
	
	/**
	 * 部署
	 * @param projectName
	 * @param deployPath
	 * @param pkgFileName
	 * @param host
	 * @param source
	 */
	public static void deploy(String projectName, String deployPath, String pkgFileName, Host host, String source){
		try {
			final File file = new File(PROJECT_PATH + "/target/" + pkgFileName);
			if(!file.exists()){
				LOG.error("打包文件不存在...");
				return;
			}
			LOG.info("开始部署:" + source + "...");
			SFTPClient sftp = SFTPClient.instance(host.getUser(), host.getPwd(), host.getIp(), host.getPort()).login();
			//没有则创建目录
			sftp.mkdirRecursively(deployPath)
			//停止
			.exec("sh " + deployPath + "/" + projectName + "/bin/bootstrap.sh stop") //这里默认启动文件为 bootstrap.sh 可自行修改
			//备份
			.mkdirRecursively(deployPath + "/tmp")
			.exec("mv " + deployPath + "/" + pkgFileName + " " + deployPath + "/tmp/" + pkgFileName + "-" + df.format(new Date()) + getSuffix(pkgFileName))
			//删除之前文件及文件夹
			.rmFileOrDirPermanently(deployPath + "/" + projectName)
			.rmFileOrDirPermanently(deployPath + "/" + pkgFileName);
			//上传
			sftp.getSFTPSession().upload(deployPath, file).close();
//			//解压
			sftp.exec("unzip " + deployPath + "/" + pkgFileName + " -d " + deployPath + "/");
//			//执行
			sftp.exec("sh " + deployPath + "/" + projectName + "/bin/bootstrap.sh start " + source);
			sftp.logout();
			LOG.info("部署完成:" + source + "...");
		} catch (Exception e) {
			LOG.error(e.getMessage(), e);
		}
	}
	
	public static void stop(String projectName, String deployPath, String pkgFileName, Host host){
		SFTPClient sftp = SFTPClient.instance(host.getUser(), host.getPwd(), host.getIp(), host.getPort()).login();
		sftp.exec("sh " + deployPath + "/" + projectName + "/bin/bootstrap.sh stop");
		sftp.logout();
	}
	
	public static void start(String projectName, String deployPath, String pkgFileName, Host host){
		SFTPClient sftp = SFTPClient.instance(host.getUser(), host.getPwd(), host.getIp(), host.getPort()).login();
		sftp.exec("sh " + deployPath + "/" + projectName + "/bin/bootstrap.sh start");
		sftp.logout();
	}
	
	public static void start(String projectName, String deployPath, String pkgFileName, Host host, String source){
		SFTPClient sftp = SFTPClient.instance(host.getUser(), host.getPwd(), host.getIp(), host.getPort()).login();
		sftp.exec("sh " + deployPath + "/" + projectName + "/bin/bootstrap.sh start " + source);
		sftp.logout();
	}
	
	public static void tail(String projectName, String deployPath, String pkgFileName, Host host){
		SFTPClient sftp = SFTPClient.instance(host.getUser(), host.getPwd(), host.getIp(), host.getPort()).login();
		sftp.exec("tail -f " + deployPath + "/" + projectName + "/bin/console.log");
		sftp.logout();
	}
	
	/**
	 * 获取文件后缀
	 * @param filePath
	 * @return
	 */
	private static String getSuffix(String filePath){
		try{
			if(filePath.contains(".")){
				return filePath.substring(filePath.lastIndexOf("."));
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		return "";
	}
}

